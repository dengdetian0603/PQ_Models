i=1
gbm.fit = gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
gbm.fit$fit
train.pred = predict(gbm.fit, train.set, n.trees = 1000)
train.pred
gbm.fit$train.error
lambda
i = 30
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
gbm.fit$fit
predict(gbm.fit, train.set, n.trees = 1000)
train.set = Hitters[1:200, ]
test.set = Hitters[-(1:200), ]
set.seed(1)
lambda <- seq(-10, 0, by = 0.2)
train.mse <- numeric()
test.mse <- numeric()
lambda[i]
lambda <- exp(seq(-10, 0, by = 0.2))
lambda[i]
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
predict(gbm.fit, train.set, n.trees = 1000)
gbm.fit$fit
gbm.fit$train.error
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
lambda
train.mse
lambda <- exp(seq(-10, 0, by = 0.2))
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit) ^ 2)
test.mse[i] <- mean((test.set$Salary - test.pred) ^ 2)
}
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
lambda <- exp(seq(-5, 0, by = 0.2))
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit) ^ 2)
test.mse[i] <- mean((test.set$Salary - test.pred) ^ 2)
}
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
train.set$Salary - gbm.fit$fit)
train.set$Salary - gbm.fit$fit
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit)^2)
test.mse[i] <- mean((test.set$Salary - test.pred)^2)
}
train.set$Salary
Hitters$Salary
data(Hitters)
Hitters$Salary
library(ISLR)
data(Hitters)
Hitters <- Hitters[!is.na(Hitters$Salary), ]
Hitters$Salary <- log(Hitters$Salary)
Hitters$Salary
train.set = Hitters[1:200, ]
test.set = Hitters[-(1:200), ]
set.seed(1)
lambda <- exp(seq(-5, 0, by = 0.2))
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit)^2)
test.mse[i] <- mean((test.set$Salary - test.pred)^2)
}
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
plot(lambda, test.mse, type = "b", xlab = "Lambda",
ylab = "Test Set MSE", pch = 20)
set.seed(123)
lambda <- exp(seq(-8, -2, by = 0.1))
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit)^2)
test.mse[i] <- mean((test.set$Salary - test.pred)^2)
}
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
plot(lambda, test.mse, type = "b", xlab = "Lambda",
ylab = "Test Set MSE", pch = 20)
lambda
lambda <- exp(seq(-7, -1, by = 0.1))
train.mse <- numeric()
test.mse <- numeric()
for (i in 1:length(lambda)) {
gbm.fit <- gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[i])
test.pred <- predict(gbm.fit, test.set, n.trees = 1000)
train.mse[i] <- mean((train.set$Salary - gbm.fit$fit)^2)
test.mse[i] <- mean((test.set$Salary - test.pred)^2)
}
plot(lambda, train.mse, type = "b", xlab = "Lambda",
ylab = "Training Set MSE", pch = 20)
```
####(d)
```{r}
plot(lambda, test.mse, type = "b", xlab = "Lambda",
ylab = "Test Set MSE", pch = 20)
library(glmnet)
lm.fit = lm(Salary ~ ., data = train.set)
lm.pred = predict(lm.fit, test.set)
mean((test.set$Salary - lm.pred)^2)
colnames(Hitters)
set.seed(123)
x.train = model.matrix(Salary ~ ., data = train.set)
x.test = model.matrix(Salary ~ ., data = test.set)
lasso.fit = glmnet(x.train, train.set$Salary, alpha = 1)
lasso.fit$lambda
x.train = model.matrix(Salary ~ ., data = train.set)
x.test = model.matrix(Salary ~ ., data = test.set)
lasso.cv = cv.glmnet(x.train, train.set$Salary, alpha = 1)
lasso.fit = glmnet(x.train, train.set$Salary, alpha = 1)
lasso.cv$lambda.min
lasso.pred <- predict(lasso.fit, s = lasso.cv$lambda.min, newx = x.test)
mean((test.set$Salary - lasso.pred)^2)
[which.min(test.mse)
which.min(test.mse)
gbm.best = gbm(Salary ~ ., data = train.set, distribution = "gaussian",
n.trees = 1000, shrinkage = lambda[which.min(test.mse)])
summary(gbm.best)
library(randomForest)
set.seed(123)
bagging.fit = randomForest(Salary ~ ., data = train.set,
ntree = 500, mtry = ncol(train.set) - 1)
bagging.pred = predict(bagging.fit, test.set)
mean((test.set$Salary - bagging.pred)^2)
data(Auto)
Auto$mpg.bin = ifelse(Auto$mpg > median(Auto$mpg), 1, 0)
Auto = subset(Auto, select = -c(mpg, name))
colnames(Auto)
library(e1071)
set.seed(123)
?svm
?glmnet
set.seed(123)
svm.linear <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "linear",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10, 100, 1000)))
Auto$mpg.bin = factor(ifelse(Auto$mpg > median(Auto$mpg), 1, 0))
Auto = subset(Auto, select = -c(mpg, name))
data(Auto)
Auto$mpg.bin = factor(ifelse(Auto$mpg > median(Auto$mpg), 1, 0))
Auto = subset(Auto, select = -c(mpg, name))
svm.linear <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "linear",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10, 50)))
summary(svm.linear)
svm.linear <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.05, 0.1, 1, 5, 10)))
summary(svm.linear)
?tune
set.seed(123)
svm.poly <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "polynomial",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10),
degree = c(2, 3, 4)))
summary(svm.poly)
set.seed(123)
svm.poly <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "polynomial",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 20),
degree = c(1, 2, 3, 4)))
summary(svm.poly)
svm.poly <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "polynomial",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 20, 50, 100),
degree = c(1, 2, 3)))
summary(svm.poly)
svm.rbf <- tune(svm, mpg.bin ~ ., data = Auto, kernel = "radial",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 20, 50, 100),
gamma = c(0.01, 0.1, 1)))
summary(svm.rbf)
set.seed(123)
data(OJ)
train.index <- sample(nrow(OJ), 800)
train.set <- OJ[train.index, ]
test.set <- OJ[-train.index, ]
svm.linear <- svm(Purchase ~ ., kernel = "linear",
data = train.set, cost = 0.01)
summary(svm.linear)
pred(svm.linear, train.set)
predict(svm.linear, train.set)
mean(predict(svm.linear, train.set) != train.set$Purchase)
mean(predict(svm.linear, test.set) != test.set$Purchase)
svm.linear.cv <- tune(svm, Purchase ~ ., data = train.set, kernel = 'linear',
ranges = list(cost = seq(0.01, 10, 25)))
svm.linear.cv$best.model
svm.linear.best <- svm(Purchase ~ ., kernel = "linear",
data = train.set, cost = svm.linear.cv$best.parameters$cost)
mean(predict(svm.linear.best, train.set) != train.set$Purchase)
mean(predict(svm.linear.best, test.set) != test.set$Purchase)
library(ggplot2)
rm(list = ls())
library(ggplot2)
load("~/Documents/JHSPH/Research/S.Zeger/PQ_Models/WorkSpace/VBexperiments/RegDebug/DebugCxxVB.RData")
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 1, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 1, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 1, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 1, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 1, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
temp = matrix(1:8, nrow = 2)
temp
dpois(temp)
dpois(0, temp)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
?Rcpp::dpois
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
a1(1:4)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
?dpois
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 3, tol = 1e-6)
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 10, tol = 1e-6)
hyper.pars.list
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 100, tol = 1e-6)
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 200, tol = 1e-6)
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 1e-6)
input.obj$ss.available = 0:4
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 5 * 1e-6)
res
input.obj$ss.available = 3:4
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 5 * 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
res = regVBEM(input.obj, hyper.pars.list, par.list, maxIter = 250, tol = 5 * 1e-6)
Rcpp::sourceCpp('Documents/JHSPH/Research/S.Zeger/PQ_Models/Code/VBEM_Regression.cpp')
setwd("~/Documents/JHSPH/Research/S.Zeger/PQ_Models/Code")
source("./RawDataProcess.R")
source("./PerchDataSimulation.R")
source("./ModelFittingJAGS.R")
source("./PostProcessJAGS.R")
source("./PerchPlots.R")
source("../../BAKER/utils.R")
library(ggplot2)
# -----------------------------------------------------------------------------
top6.names = c("HINF", "PARA_3", "RSV", "PNEU", "HMPV_A_B", "NFGNR")
mal.raw = read.csv("../WorkSpace/PQ_20170421/MAL_hiv-_rawdata_mobs.csv")
top6.data = GetTopK(mal.raw, top6.names)
head(top6.data$topK.mbs.case)
head(top6.data$topK.mss.case)
head(top6.data$topK.mbs.ctrl)
head(top6.data$bs.available)
head(top6.data$ss.available)
input.data = top6.data
input.data$bs.available
input.data$ss.available
input.obj = list(L = matrix(NA, ncol = num.Pathogen, nrow = 5),
Smax = num.Pathogen)
input.obj$MBS.case = input.data$topK.mbs.case
input.obj$MSS.case = input.data$topK.mss.case
input.obj$MBS.ctrl = input.data$topK.mbs.ctrl
input.obj$X = data.frame(intercept = rep(1, nrow(input.data$topK.mbs.case)))
input.data = top6.data
input.data$bs.available
input.data$ss.available
num.Pathogen = ncol(input.data$topK.mbs.case) # get K
# put in real data
input.obj = list(L = matrix(NA, ncol = num.Pathogen, nrow = 5),
Smax = num.Pathogen)
input.obj$MBS.case = input.data$topK.mbs.case
input.obj$MSS.case = input.data$topK.mss.case
input.obj$MBS.ctrl = input.data$topK.mbs.ctrl
input.obj$X = data.frame(intercept = rep(1, nrow(input.data$topK.mbs.case)))
# set hyper-parameter
bs.tpr.hyperpar = beta_parms_from_quantiles(c(0.5, 0.9), p = c(0.025, 0.975),
plot = FALSE)
ss.tpr.hyperpar1 = beta_parms_from_quantiles(c(0.05, 0.2), p = c(0.025, 0.975),
plot = FALSE)
ss.tpr.hyperpar2 = beta_parms_from_quantiles(c(0.05, 0.15), p = c(0.025, 0.975),
plot = FALSE)
ss.tpr.hyperpar3 = beta_parms_from_quantiles(c(0.05, 0.5), p = c(0.025, 0.975),
plot = FALSE)
hyper.pars.list = SetDefaultHyperParameters(K = num.Pathogen)
hyper.pars.list$aa = rep(ss.tpr.hyperpar1$a, num.Pathogen) # HINF, PNEU
hyper.pars.list$bb = rep(ss.tpr.hyperpar1$b, num.Pathogen)
hyper.pars.list$aa[6] = ss.tpr.hyperpar2$a # NFGNR
hyper.pars.list$bb[6] = ss.tpr.hyperpar2$b # NFGNR
hyper.pars.list$cc = bs.tpr.hyperpar$a
hyper.pars.list$dd = bs.tpr.hyperpar$b
hyper.pars.list$tau_theta = 0.2
hyper.pars.list$pind_a = 6
hyper.pars.list$pind_b = 2
hyper.pars.list$theta2_mu = -9
model.file1 = "./jags/SparseCorr1_BSandSS_NoReg.jags"
# fit model
jags.result = FitJags(input.obj,
c("cell_prob", "theta1", "theta2",
"bs_tpr", "ss_tpr", "bs_fpr"),
model.file1, NULL, hyper.pars.list,
15000, 10000, 5, 1)
coda.fit = as.mcmc(jags.result)
post.mean = round(summary(coda.fit)[[1]][,1], 3)
post.mean[grepl("tpr", names(post.mean))]
plot(coda.fit)
Mu.fit = ExtractMu(coda.fit[[1]], input.obj)
colnames(Mu.fit) = top6.names # mutable names
plot(as.mcmc(Mu.fit))
Pr.Num.Path.fit = ExtractPrNumPath(coda.fit[[1]], input.obj)
Pr.Num.Path.fit = cbind(1 - rowSums(Pr.Num.Path.fit), Pr.Num.Path.fit)
round(summary(as.mcmc(Pr.Num.Path.fit))[[1]], 4)
6 + choose(6,2)
ListEtiology(coda.fit[[1]], input.obj, top6.names,
reorder = FALSE, num.keep = 26)
ListEtiology(coda.fit[[1]], input.obj, top6.names,
reorder = FALSE, num.keep = 22)
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top5.names,
contrast = "prior", reorder = FALSE, num.keep = 26,
text.adjust = -1.2)
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top6.names,
contrast = "prior", reorder = FALSE, num.keep = 22,
text.adjust = -1.2)
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top6.names,
contrast = "prior", reorder = FALSE, num.keep = 22,
text.adjust = -0.9)
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top6.names,
contrast = "prior", reorder = FALSE, num.keep = 22,
text.adjust = -1)
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top6.names,
contrast = "prior", reorder = FALSE, num.keep = 22,
text.adjust = -1.05)
PlotByPathogen(coda.chains = coda.fit[[1]], input.obj,
etio.names = top6.names, mu.fit = Mu.fit,
has.true.value = FALSE)
bs.tpr.fit = coda.fit[[1]][, grepl("bs_tpr", colnames(coda.fit[[1]]))][, input.data$bs.available]
bs.fpr.fit = coda.fit[[1]][, grepl("bs_fpr", colnames(coda.fit[[1]]))][, input.data$bs.available]
ss.tpr.fit = coda.fit[[1]][, grepl("ss_tpr", colnames(coda.fit[[1]]))][, input.data$ss.available]
pos.rates = cbind(bs.tpr.fit, bs.fpr.fit, ss.tpr.fit)
pos.rates.summary = rbind(colMeans(pos.rates),
apply(pos.rates, 2,
quantile, c(0.025, 0.975)))
rownames(pos.rates.summary)[1] = "Mean"
round(pos.rates.summary, 3)
plot(density(rbeta(99999, bs.tpr.hyperpar$a,
bs.tpr.hyperpar$b)),
xlim = c(0, 1), ylim = c(0, 4.5), col = "red",
xlab = "", main = "BS TPR")
lines(density(bs.tpr.fit[, 4]), col = "purple")
mu.raw = colMeans(input.data$topK.mbs.case, na.rm = TRUE)
# mu.hat = (mu.raw - fpr)/(tpr - fpr)
mu.hat = (mu.raw - colMeans(bs.fpr.fit))/(colMeans(bs.tpr.fit) - colMeans(bs.fpr.fit))
cbind(mu.raw, mu.hat, colMeans(Mu.fit))
save.image(file = "../WorkSpace/PQ_20170421/MAL_HIV-_top6.Rdata")
MuSummary = function(Experiment, Mu.fit, Pr.Num.Path.fit) {
Mu.fit = cbind(Pr.Num.Path.fit[, 1], Mu.fit)
colnames(Mu.fit)[1] = "NoA"
mu.plot = data.frame(Pathogen = colnames(Mu.fit), Experiment = Experiment,
Posterior.Mean = colMeans(Mu.fit),
Lower = apply(Mu.fit, 2, quantile, 0.025),
Upper = apply(Mu.fit, 2, quantile, 0.975))
mu.plot
}
mu.plot = MuSummary('top6', Mu.fit, Pr.Num.Path.fit)
mu.plot
g = ggplot(data = mu.plot, aes(x = factor(Pathogen), col = Experiment)) +
geom_point(aes(y = Posterior.Mean), position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymax = Upper, ymin = Lower),
position = position_dodge(width = 0.5)) +
ylab("Posterior Distribution") + xlab("Pathogen")
g
post.mean[grepl("theta2", names(post.mean))]
class(post.mean)
post.mean[1]
post.mean[grepl("theta2[1-9]", names(post.mean))]
post.mean[grepl("theta2[?]", names(post.mean))]
?grepl
post.mean[grepl("theta2[:digit:]", names(post.mean))]
grepl("theta2[[:digit:]]", names(post.mean))
grepl("theta2[[0-9]]", names(post.mean))
grepl("theta2\[[0-9]\]", names(post.mean))
grepl("theta2[+[0-9]+]", names(post.mean))
post.mean[grepl("theta2[+[0-9]+]", names(post.mean))]
post.mean[grepl("theta2[+[0-9]?+]", names(post.mean))]
post.mean[grepl("theta2[+?[0-9]+]", names(post.mean))]
post.mean[grepl("theta2[+?[0-9]]", names(post.mean))]
post.mean[grepl("theta2[+[0-9]{1}+]", names(post.mean))]
post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))]
c(post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))],
post.mean[grepl("theta2.1[0-9]{1}]", names(post.mean))])
etio.probs = ListEtiology(coda.fit[[1]], input.obj, top6.names,
reorder = FALSE, num.keep = 22) # mutable names
etio.probs
etio.probs[[1]][8:22, 1]
theta2.est = c(post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))],
post.mean[grepl("theta2.1[0-9]{1}]", names(post.mean))])
names(theta2.est) = etio.probs[[1]][8:22, 1]
theta2.est
save.image(file = "../WorkSpace/PQ_20170421/MAL_HIV-_top6.Rdata")
round(t(pos.rates.summary), 3)
pos.rates.tab = round(t(pos.rates.summary), 3)
rownames(pos.rates.tab) = c(paste0("bs_tpr_", top6.names[input.data$bs.available]),
paste0("bs_fpr_", top6.names[input.data$bs.available]),
paste0("ss_tpr_", top6.names[input.data$ss.available]))
pos.rates.tab
mu.raw
mu.hat
mu.compare = cbind(mu.raw, mu.hat, colMeans(Mu.fit),
t(apply(Mu.fit, 2, quantile, c(0.025, 0.975))))
colnames(mu.compare)[1:3] = c("mu.raw", "mu.adjusted", "mu.posterior")
round(mu.compare, 3)
Pr.num.tab = cbind(colMeans(Pr.Num.Path.fit),
t(apply(Pr.Num.Path.fit, 2, quantile, c(0.025, 0.975))))
colnames(Pr.num.tab)[1] = "Means"
rownames(Pr.num.tab) = paste0("Pr(#pathogen=", 0:6, ")")
round(Pr.num.tab, 3)
prob.comb = ListEtiology(coda.fit[[1]], sim.obj, top6.names,
reorder = FALSE, num.keep = 22)[[1]]
cbind(prob.comb[, 1], round(prob.comb[, -1], 3))
prob.comb = ListEtiology(coda.fit[[1]], input.obj, top6.names,
reorder = FALSE, num.keep = 22)[[1]]
cbind(prob.comb[, 1], round(prob.comb[, -1], 3))
prob.comb = ListEtiology(coda.fit[[1]], input.obj, top6.names,
reorder = FALSE, num.keep = 22)[[1]]
cbind(prob.comb[, 1], round(prob.comb[, -1], 3))
# make plots
plot.obj =
PlotByCombination(coda.chains = coda.fit[[1]], input.obj, hyper.pars.list,
etio.names = top6.names,
contrast = "prior", reorder = FALSE, num.keep = 22,
text.adjust = -1.05)
theta2.est = c(post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))],
post.mean[grepl("theta2.1[0-9]{1}]", names(post.mean))])
names(theta2.est) = prob.comb[[1]][8:22, 1]
theta2.est = c(post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))],
post.mean[grepl("theta2.1[0-9]{1}]", names(post.mean))])
names(theta2.est) = prob.comb[8:22, 1]
theta2.est = c(post.mean[grepl("theta2.[0-9]{1}]", names(post.mean))],
post.mean[grepl("theta2.1[0-9]{1}]", names(post.mean))])
names(theta2.est) = prob.comb[8:22, 1]
theta2.est
g = ggplot(data = mu.plot, aes(x = factor(Pathogen), col = Experiment)) +
geom_point(aes(y = Posterior.Mean), position = position_dodge(width = 0.5)) +
geom_linerange(aes(ymax = Upper, ymin = Lower),
position = position_dodge(width = 0.5)) +
ylab("Posterior Distribution") + xlab("Pathogen")
g
g
